import { IAddNetworkInfo } from '../interfaces/add-network-info.interface';
import { IMetamascaraPlugin } from '../interfaces/plugins/metamascara-plugin.interface';
import { IBlockchainInfo } from '../interfaces/blockchain-info.interface';
import { IMetaMascara } from '../interfaces/metamascara.interface';
import { IBigNumber } from '../interfaces/bignumber.interface';
export declare class MetaMascara implements IMetaMascara {
    private web3Factory;
    private detectEthereumProvider;
    private selectedAccount;
    private web3;
    private provider;
    private _accounts;
    private _networkId;
    private _blockchains;
    constructor(web3Factory: (provider: any) => any, detectEthereumProvider: () => Promise<any>);
    get isConnected(): boolean;
    get accounts(): string[];
    get address(): string | null;
    get networkId(): number;
    get networkName(): string;
    get blockchains(): Record<number, IBlockchainInfo>;
    get blockchainsList(): IBlockchainInfo[];
    connect(): Promise<boolean>;
    addNetwork(info: IAddNetworkInfo): Promise<boolean>;
    sign(textToSign: string, address?: string): Promise<any>;
    disconnect(): void;
    getContract(address: string, abi: any): any;
    getBalance(address?: string): Promise<IBigNumber>;
    getNonce(address: string): Promise<number>;
    toHex(x: any): string;
    toWei(value: any, unit: string): string;
    addPlugin(plugin: IMetamascaraPlugin): void;
    private connectProvider;
    private disposeProvider;
    private disposeWeb3;
    private reload;
}
