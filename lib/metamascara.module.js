var e={431:function(e,t,n){var r;!function(i){var o,c=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,s=Math.ceil,u=Math.floor,a="[BigNumber Error] ",l=a+"Number primitive has more than 15 significant digits: ",f=1e14,h=14,p=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],b=1e7,g=1e9;function m(e){var t=0|e;return e>0||e===t?t:t-1}function w(e){for(var t,n,r=1,i=e.length,o=e[0]+"";r<i;){for(t=e[r++]+"",n=h-t.length;n--;t="0"+t);o+=t}for(i=o.length;48===o.charCodeAt(--i););return o.slice(0,i+1||1)}function y(e,t){var n,r,i=e.c,o=t.c,c=e.s,s=t.s,u=e.e,a=t.e;if(!c||!s)return null;if(n=i&&!i[0],r=o&&!o[0],n||r)return n?r?0:-s:c;if(c!=s)return c;if(n=c<0,r=u==a,!i||!o)return r?0:!i^n?1:-1;if(!r)return u>a^n?1:-1;for(s=(u=i.length)<(a=o.length)?u:a,c=0;c<s;c++)if(i[c]!=o[c])return i[c]>o[c]^n?1:-1;return u==a?0:u>a^n?1:-1}function v(e,t,n,r){if(e<t||e>n||e!==u(e))throw Error(a+(r||"Argument")+("number"==typeof e?e<t||e>n?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function N(e){var t=e.c.length-1;return m(e.e/h)==t&&e.c[t]%2!=0}function E(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function O(e,t,n){var r,i;if(t<0){for(i=n+".";++t;i+=n);e=i+e}else if(++t>(r=e.length)){for(i=n,t-=r;--t;i+=n);e+=i}else t<r&&(e=e.slice(0,t)+"."+e.slice(t));return e}o=function e(t){var n,r,i,o,P,A,I,k,x,B,C=H.prototype={constructor:H,toString:null,valueOf:null},_=new H(1),T=20,S=4,M=-7,U=21,R=-1e7,D=1e7,L=!1,j=1,F=0,q={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"Â ",suffix:""},G="0123456789abcdefghijklmnopqrstuvwxyz",W=!0;function H(e,t){var n,o,s,a,f,d,b,g,m=this;if(!(m instanceof H))return new H(e,t);if(null==t){if(e&&!0===e._isBigNumber)return m.s=e.s,void(!e.c||e.e>D?m.c=m.e=null:e.e<R?m.c=[m.e=0]:(m.e=e.e,m.c=e.c.slice()));if((d="number"==typeof e)&&0*e==0){if(m.s=1/e<0?(e=-e,-1):1,e===~~e){for(a=0,f=e;f>=10;f/=10,a++);return void(a>D?m.c=m.e=null:(m.e=a,m.c=[e]))}g=String(e)}else{if(!c.test(g=String(e)))return i(m,g,d);m.s=45==g.charCodeAt(0)?(g=g.slice(1),-1):1}(a=g.indexOf("."))>-1&&(g=g.replace(".","")),(f=g.search(/e/i))>0?(a<0&&(a=f),a+=+g.slice(f+1),g=g.substring(0,f)):a<0&&(a=g.length)}else{if(v(t,2,G.length,"Base"),10==t&&W)return Z(m=new H(e),T+m.e+1,S);if(g=String(e),d="number"==typeof e){if(0*e!=0)return i(m,g,d,t);if(m.s=1/e<0?(g=g.slice(1),-1):1,H.DEBUG&&g.replace(/^0\.0*|\./,"").length>15)throw Error(l+e)}else m.s=45===g.charCodeAt(0)?(g=g.slice(1),-1):1;for(n=G.slice(0,t),a=f=0,b=g.length;f<b;f++)if(n.indexOf(o=g.charAt(f))<0){if("."==o){if(f>a){a=b;continue}}else if(!s&&(g==g.toUpperCase()&&(g=g.toLowerCase())||g==g.toLowerCase()&&(g=g.toUpperCase()))){s=!0,f=-1,a=0;continue}return i(m,String(e),d,t)}d=!1,(a=(g=r(g,t,10,m.s)).indexOf("."))>-1?g=g.replace(".",""):a=g.length}for(f=0;48===g.charCodeAt(f);f++);for(b=g.length;48===g.charCodeAt(--b););if(g=g.slice(f,++b)){if(b-=f,d&&H.DEBUG&&b>15&&(e>p||e!==u(e)))throw Error(l+m.s*e);if((a=a-f-1)>D)m.c=m.e=null;else if(a<R)m.c=[m.e=0];else{if(m.e=a,m.c=[],f=(a+1)%h,a<0&&(f+=h),f<b){for(f&&m.c.push(+g.slice(0,f)),b-=h;f<b;)m.c.push(+g.slice(f,f+=h));f=h-(g=g.slice(f)).length}else f-=b;for(;f--;g+="0");m.c.push(+g)}}else m.c=[m.e=0]}function z(e,t,n,r){var i,o,c,s,u;if(null==n?n=S:v(n,0,8),!e.c)return e.toString();if(i=e.c[0],c=e.e,null==t)u=w(e.c),u=1==r||2==r&&(c<=M||c>=U)?E(u,c):O(u,c,"0");else if(o=(e=Z(new H(e),t,n)).e,s=(u=w(e.c)).length,1==r||2==r&&(t<=o||o<=M)){for(;s<t;u+="0",s++);u=E(u,o)}else if(t-=c,u=O(u,o,"0"),o+1>s){if(--t>0)for(u+=".";t--;u+="0");}else if((t+=o-s)>0)for(o+1==s&&(u+=".");t--;u+="0");return e.s<0&&i?"-"+u:u}function $(e,t){for(var n,r=1,i=new H(e[0]);r<e.length;r++){if(!(n=new H(e[r])).s){i=n;break}t.call(i,n)&&(i=n)}return i}function V(e,t,n){for(var r=1,i=t.length;!t[--i];t.pop());for(i=t[0];i>=10;i/=10,r++);return(n=r+n*h-1)>D?e.c=e.e=null:n<R?e.c=[e.e=0]:(e.e=n,e.c=t),e}function Z(e,t,n,r){var i,o,c,a,l,p,b,g=e.c,m=d;if(g){e:{for(i=1,a=g[0];a>=10;a/=10,i++);if((o=t-i)<0)o+=h,c=t,b=(l=g[p=0])/m[i-c-1]%10|0;else if((p=s((o+1)/h))>=g.length){if(!r)break e;for(;g.length<=p;g.push(0));l=b=0,i=1,c=(o%=h)-h+1}else{for(l=a=g[p],i=1;a>=10;a/=10,i++);b=(c=(o%=h)-h+i)<0?0:l/m[i-c-1]%10|0}if(r=r||t<0||null!=g[p+1]||(c<0?l:l%m[i-c-1]),r=n<4?(b||r)&&(0==n||n==(e.s<0?3:2)):b>5||5==b&&(4==n||r||6==n&&(o>0?c>0?l/m[i-c]:0:g[p-1])%10&1||n==(e.s<0?8:7)),t<1||!g[0])return g.length=0,r?(t-=e.e+1,g[0]=m[(h-t%h)%h],e.e=-t||0):g[0]=e.e=0,e;if(0==o?(g.length=p,a=1,p--):(g.length=p+1,a=m[h-o],g[p]=c>0?u(l/m[i-c]%m[c])*a:0),r)for(;;){if(0==p){for(o=1,c=g[0];c>=10;c/=10,o++);for(c=g[0]+=a,a=1;c>=10;c/=10,a++);o!=a&&(e.e++,g[0]==f&&(g[0]=1));break}if(g[p]+=a,g[p]!=f)break;g[p--]=0,a=1}for(o=g.length;0===g[--o];g.pop());}e.e>D?e.c=e.e=null:e.e<R&&(e.c=[e.e=0])}return e}function Q(e){var t,n=e.e;return null===n?e.toString():(t=w(e.c),t=n<=M||n>=U?E(t,n):O(t,n,"0"),e.s<0?"-"+t:t)}return H.clone=e,H.ROUND_UP=0,H.ROUND_DOWN=1,H.ROUND_CEIL=2,H.ROUND_FLOOR=3,H.ROUND_HALF_UP=4,H.ROUND_HALF_DOWN=5,H.ROUND_HALF_EVEN=6,H.ROUND_HALF_CEIL=7,H.ROUND_HALF_FLOOR=8,H.EUCLID=9,H.config=H.set=function(e){var t,n;if(null!=e){if("object"!=typeof e)throw Error(a+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(v(n=e[t],0,g,t),T=n),e.hasOwnProperty(t="ROUNDING_MODE")&&(v(n=e[t],0,8,t),S=n),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((n=e[t])&&n.pop?(v(n[0],-g,0,t),v(n[1],0,g,t),M=n[0],U=n[1]):(v(n,-g,g,t),M=-(U=n<0?-n:n))),e.hasOwnProperty(t="RANGE"))if((n=e[t])&&n.pop)v(n[0],-g,-1,t),v(n[1],1,g,t),R=n[0],D=n[1];else{if(v(n,-g,g,t),!n)throw Error(a+t+" cannot be zero: "+n);R=-(D=n<0?-n:n)}if(e.hasOwnProperty(t="CRYPTO")){if((n=e[t])!==!!n)throw Error(a+t+" not true or false: "+n);if(n){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw L=!n,Error(a+"crypto unavailable");L=n}else L=n}if(e.hasOwnProperty(t="MODULO_MODE")&&(v(n=e[t],0,9,t),j=n),e.hasOwnProperty(t="POW_PRECISION")&&(v(n=e[t],0,g,t),F=n),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(n=e[t]))throw Error(a+t+" not an object: "+n);q=n}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(n=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(n))throw Error(a+t+" invalid: "+n);W="0123456789"==n.slice(0,10),G=n}}return{DECIMAL_PLACES:T,ROUNDING_MODE:S,EXPONENTIAL_AT:[M,U],RANGE:[R,D],CRYPTO:L,MODULO_MODE:j,POW_PRECISION:F,FORMAT:q,ALPHABET:G}},H.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!H.DEBUG)return!0;var t,n,r=e.c,i=e.e,o=e.s;e:if("[object Array]"=={}.toString.call(r)){if((1===o||-1===o)&&i>=-g&&i<=g&&i===u(i)){if(0===r[0]){if(0===i&&1===r.length)return!0;break e}if((t=(i+1)%h)<1&&(t+=h),String(r[0]).length==t){for(t=0;t<r.length;t++)if((n=r[t])<0||n>=f||n!==u(n))break e;if(0!==n)return!0}}}else if(null===r&&null===i&&(null===o||1===o||-1===o))return!0;throw Error(a+"Invalid BigNumber: "+e)},H.maximum=H.max=function(){return $(arguments,C.lt)},H.minimum=H.min=function(){return $(arguments,C.gt)},H.random=(o=9007199254740992,P=Math.random()*o&2097151?function(){return u(Math.random()*o)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,n,r,i,o,c=0,l=[],f=new H(_);if(null==e?e=T:v(e,0,g),i=s(e/h),L)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(i*=2));c<i;)(o=131072*t[c]+(t[c+1]>>>11))>=9e15?(n=crypto.getRandomValues(new Uint32Array(2)),t[c]=n[0],t[c+1]=n[1]):(l.push(o%1e14),c+=2);c=i/2}else{if(!crypto.randomBytes)throw L=!1,Error(a+"crypto unavailable");for(t=crypto.randomBytes(i*=7);c<i;)(o=281474976710656*(31&t[c])+1099511627776*t[c+1]+4294967296*t[c+2]+16777216*t[c+3]+(t[c+4]<<16)+(t[c+5]<<8)+t[c+6])>=9e15?crypto.randomBytes(7).copy(t,c):(l.push(o%1e14),c+=7);c=i/7}if(!L)for(;c<i;)(o=P())<9e15&&(l[c++]=o%1e14);for(i=l[--c],e%=h,i&&e&&(o=d[h-e],l[c]=u(i/o)*o);0===l[c];l.pop(),c--);if(c<0)l=[r=0];else{for(r=-1;0===l[0];l.splice(0,1),r-=h);for(c=1,o=l[0];o>=10;o/=10,c++);c<h&&(r-=h-c)}return f.e=r,f.c=l,f}),H.sum=function(){for(var e=1,t=arguments,n=new H(t[0]);e<t.length;)n=n.plus(t[e++]);return n},r=function(){var e="0123456789";function t(e,t,n,r){for(var i,o,c=[0],s=0,u=e.length;s<u;){for(o=c.length;o--;c[o]*=t);for(c[0]+=r.indexOf(e.charAt(s++)),i=0;i<c.length;i++)c[i]>n-1&&(null==c[i+1]&&(c[i+1]=0),c[i+1]+=c[i]/n|0,c[i]%=n)}return c.reverse()}return function(r,i,o,c,s){var u,a,l,f,h,p,d,b,g=r.indexOf("."),m=T,y=S;for(g>=0&&(f=F,F=0,r=r.replace(".",""),p=(b=new H(i)).pow(r.length-g),F=f,b.c=t(O(w(p.c),p.e,"0"),10,o,e),b.e=b.c.length),l=f=(d=t(r,i,o,s?(u=G,e):(u=e,G))).length;0==d[--f];d.pop());if(!d[0])return u.charAt(0);if(g<0?--l:(p.c=d,p.e=l,p.s=c,d=(p=n(p,b,m,y,o)).c,h=p.r,l=p.e),g=d[a=l+m+1],f=o/2,h=h||a<0||null!=d[a+1],h=y<4?(null!=g||h)&&(0==y||y==(p.s<0?3:2)):g>f||g==f&&(4==y||h||6==y&&1&d[a-1]||y==(p.s<0?8:7)),a<1||!d[0])r=h?O(u.charAt(1),-m,u.charAt(0)):u.charAt(0);else{if(d.length=a,h)for(--o;++d[--a]>o;)d[a]=0,a||(++l,d=[1].concat(d));for(f=d.length;!d[--f];);for(g=0,r="";g<=f;r+=u.charAt(d[g++]));r=O(r,l,u.charAt(0))}return r}}(),n=function(){function e(e,t,n){var r,i,o,c,s=0,u=e.length,a=t%b,l=t/b|0;for(e=e.slice();u--;)s=((i=a*(o=e[u]%b)+(r=l*o+(c=e[u]/b|0)*a)%b*b+s)/n|0)+(r/b|0)+l*c,e[u]=i%n;return s&&(e=[s].concat(e)),e}function t(e,t,n,r){var i,o;if(n!=r)o=n>r?1:-1;else for(i=o=0;i<n;i++)if(e[i]!=t[i]){o=e[i]>t[i]?1:-1;break}return o}function n(e,t,n,r){for(var i=0;n--;)e[n]-=i,i=e[n]<t[n]?1:0,e[n]=i*r+e[n]-t[n];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(r,i,o,c,s){var a,l,p,d,b,g,w,y,v,N,E,O,P,A,I,k,x,B=r.s==i.s?1:-1,C=r.c,_=i.c;if(!(C&&C[0]&&_&&_[0]))return new H(r.s&&i.s&&(C?!_||C[0]!=_[0]:_)?C&&0==C[0]||!_?0*B:B/0:NaN);for(v=(y=new H(B)).c=[],B=o+(l=r.e-i.e)+1,s||(s=f,l=m(r.e/h)-m(i.e/h),B=B/h|0),p=0;_[p]==(C[p]||0);p++);if(_[p]>(C[p]||0)&&l--,B<0)v.push(1),d=!0;else{for(A=C.length,k=_.length,p=0,B+=2,(b=u(s/(_[0]+1)))>1&&(_=e(_,b,s),C=e(C,b,s),k=_.length,A=C.length),P=k,E=(N=C.slice(0,k)).length;E<k;N[E++]=0);x=_.slice(),x=[0].concat(x),I=_[0],_[1]>=s/2&&I++;do{if(b=0,(a=t(_,N,k,E))<0){if(O=N[0],k!=E&&(O=O*s+(N[1]||0)),(b=u(O/I))>1)for(b>=s&&(b=s-1),w=(g=e(_,b,s)).length,E=N.length;1==t(g,N,w,E);)b--,n(g,k<w?x:_,w,s),w=g.length,a=1;else 0==b&&(a=b=1),w=(g=_.slice()).length;if(w<E&&(g=[0].concat(g)),n(N,g,E,s),E=N.length,-1==a)for(;t(_,N,k,E)<1;)b++,n(N,k<E?x:_,E,s),E=N.length}else 0===a&&(b++,N=[0]);v[p++]=b,N[0]?N[E++]=C[P]||0:(N=[C[P]],E=1)}while((P++<A||null!=N[0])&&B--);d=null!=N[0],v[0]||v.splice(0,1)}if(s==f){for(p=1,B=v[0];B>=10;B/=10,p++);Z(y,o+(y.e=p+l*h-1)+1,c,d)}else y.e=l,y.r=+d;return y}}(),A=/^(-?)0([xbo])(?=\w[\w.]*$)/i,I=/^([^.]+)\.$/,k=/^\.([^.]+)$/,x=/^-?(Infinity|NaN)$/,B=/^\s*\+(?=[\w.])|^\s+|\s+$/g,i=function(e,t,n,r){var i,o=n?t:t.replace(B,"");if(x.test(o))e.s=isNaN(o)?null:o<0?-1:1;else{if(!n&&(o=o.replace(A,(function(e,t,n){return i="x"==(n=n.toLowerCase())?16:"b"==n?2:8,r&&r!=i?e:t})),r&&(i=r,o=o.replace(I,"$1").replace(k,"0.$1")),t!=o))return new H(o,i);if(H.DEBUG)throw Error(a+"Not a"+(r?" base "+r:"")+" number: "+t);e.s=null}e.c=e.e=null},C.absoluteValue=C.abs=function(){var e=new H(this);return e.s<0&&(e.s=1),e},C.comparedTo=function(e,t){return y(this,new H(e,t))},C.decimalPlaces=C.dp=function(e,t){var n,r,i,o=this;if(null!=e)return v(e,0,g),null==t?t=S:v(t,0,8),Z(new H(o),e+o.e+1,t);if(!(n=o.c))return null;if(r=((i=n.length-1)-m(this.e/h))*h,i=n[i])for(;i%10==0;i/=10,r--);return r<0&&(r=0),r},C.dividedBy=C.div=function(e,t){return n(this,new H(e,t),T,S)},C.dividedToIntegerBy=C.idiv=function(e,t){return n(this,new H(e,t),0,1)},C.exponentiatedBy=C.pow=function(e,t){var n,r,i,o,c,l,f,p,d=this;if((e=new H(e)).c&&!e.isInteger())throw Error(a+"Exponent not an integer: "+Q(e));if(null!=t&&(t=new H(t)),c=e.e>14,!d.c||!d.c[0]||1==d.c[0]&&!d.e&&1==d.c.length||!e.c||!e.c[0])return p=new H(Math.pow(+Q(d),c?2-N(e):+Q(e))),t?p.mod(t):p;if(l=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new H(NaN);(r=!l&&d.isInteger()&&t.isInteger())&&(d=d.mod(t))}else{if(e.e>9&&(d.e>0||d.e<-1||(0==d.e?d.c[0]>1||c&&d.c[1]>=24e7:d.c[0]<8e13||c&&d.c[0]<=9999975e7)))return o=d.s<0&&N(e)?-0:0,d.e>-1&&(o=1/o),new H(l?1/o:o);F&&(o=s(F/h+2))}for(c?(n=new H(.5),l&&(e.s=1),f=N(e)):f=(i=Math.abs(+Q(e)))%2,p=new H(_);;){if(f){if(!(p=p.times(d)).c)break;o?p.c.length>o&&(p.c.length=o):r&&(p=p.mod(t))}if(i){if(0===(i=u(i/2)))break;f=i%2}else if(Z(e=e.times(n),e.e+1,1),e.e>14)f=N(e);else{if(0==(i=+Q(e)))break;f=i%2}d=d.times(d),o?d.c&&d.c.length>o&&(d.c.length=o):r&&(d=d.mod(t))}return r?p:(l&&(p=_.div(p)),t?p.mod(t):o?Z(p,F,S,void 0):p)},C.integerValue=function(e){var t=new H(this);return null==e?e=S:v(e,0,8),Z(t,t.e+1,e)},C.isEqualTo=C.eq=function(e,t){return 0===y(this,new H(e,t))},C.isFinite=function(){return!!this.c},C.isGreaterThan=C.gt=function(e,t){return y(this,new H(e,t))>0},C.isGreaterThanOrEqualTo=C.gte=function(e,t){return 1===(t=y(this,new H(e,t)))||0===t},C.isInteger=function(){return!!this.c&&m(this.e/h)>this.c.length-2},C.isLessThan=C.lt=function(e,t){return y(this,new H(e,t))<0},C.isLessThanOrEqualTo=C.lte=function(e,t){return-1===(t=y(this,new H(e,t)))||0===t},C.isNaN=function(){return!this.s},C.isNegative=function(){return this.s<0},C.isPositive=function(){return this.s>0},C.isZero=function(){return!!this.c&&0==this.c[0]},C.minus=function(e,t){var n,r,i,o,c=this,s=c.s;if(t=(e=new H(e,t)).s,!s||!t)return new H(NaN);if(s!=t)return e.s=-t,c.plus(e);var u=c.e/h,a=e.e/h,l=c.c,p=e.c;if(!u||!a){if(!l||!p)return l?(e.s=-t,e):new H(p?c:NaN);if(!l[0]||!p[0])return p[0]?(e.s=-t,e):new H(l[0]?c:3==S?-0:0)}if(u=m(u),a=m(a),l=l.slice(),s=u-a){for((o=s<0)?(s=-s,i=l):(a=u,i=p),i.reverse(),t=s;t--;i.push(0));i.reverse()}else for(r=(o=(s=l.length)<(t=p.length))?s:t,s=t=0;t<r;t++)if(l[t]!=p[t]){o=l[t]<p[t];break}if(o&&(i=l,l=p,p=i,e.s=-e.s),(t=(r=p.length)-(n=l.length))>0)for(;t--;l[n++]=0);for(t=f-1;r>s;){if(l[--r]<p[r]){for(n=r;n&&!l[--n];l[n]=t);--l[n],l[r]+=f}l[r]-=p[r]}for(;0==l[0];l.splice(0,1),--a);return l[0]?V(e,l,a):(e.s=3==S?-1:1,e.c=[e.e=0],e)},C.modulo=C.mod=function(e,t){var r,i,o=this;return e=new H(e,t),!o.c||!e.s||e.c&&!e.c[0]?new H(NaN):!e.c||o.c&&!o.c[0]?new H(o):(9==j?(i=e.s,e.s=1,r=n(o,e,0,3),e.s=i,r.s*=i):r=n(o,e,0,j),(e=o.minus(r.times(e))).c[0]||1!=j||(e.s=o.s),e)},C.multipliedBy=C.times=function(e,t){var n,r,i,o,c,s,u,a,l,p,d,g,w,y,v,N=this,E=N.c,O=(e=new H(e,t)).c;if(!(E&&O&&E[0]&&O[0]))return!N.s||!e.s||E&&!E[0]&&!O||O&&!O[0]&&!E?e.c=e.e=e.s=null:(e.s*=N.s,E&&O?(e.c=[0],e.e=0):e.c=e.e=null),e;for(r=m(N.e/h)+m(e.e/h),e.s*=N.s,(u=E.length)<(p=O.length)&&(w=E,E=O,O=w,i=u,u=p,p=i),i=u+p,w=[];i--;w.push(0));for(y=f,v=b,i=p;--i>=0;){for(n=0,d=O[i]%v,g=O[i]/v|0,o=i+(c=u);o>i;)n=((a=d*(a=E[--c]%v)+(s=g*a+(l=E[c]/v|0)*d)%v*v+w[o]+n)/y|0)+(s/v|0)+g*l,w[o--]=a%y;w[o]=n}return n?++r:w.splice(0,1),V(e,w,r)},C.negated=function(){var e=new H(this);return e.s=-e.s||null,e},C.plus=function(e,t){var n,r=this,i=r.s;if(t=(e=new H(e,t)).s,!i||!t)return new H(NaN);if(i!=t)return e.s=-t,r.minus(e);var o=r.e/h,c=e.e/h,s=r.c,u=e.c;if(!o||!c){if(!s||!u)return new H(i/0);if(!s[0]||!u[0])return u[0]?e:new H(s[0]?r:0*i)}if(o=m(o),c=m(c),s=s.slice(),i=o-c){for(i>0?(c=o,n=u):(i=-i,n=s),n.reverse();i--;n.push(0));n.reverse()}for((i=s.length)-(t=u.length)<0&&(n=u,u=s,s=n,t=i),i=0;t;)i=(s[--t]=s[t]+u[t]+i)/f|0,s[t]=f===s[t]?0:s[t]%f;return i&&(s=[i].concat(s),++c),V(e,s,c)},C.precision=C.sd=function(e,t){var n,r,i,o=this;if(null!=e&&e!==!!e)return v(e,1,g),null==t?t=S:v(t,0,8),Z(new H(o),e,t);if(!(n=o.c))return null;if(r=(i=n.length-1)*h+1,i=n[i]){for(;i%10==0;i/=10,r--);for(i=n[0];i>=10;i/=10,r++);}return e&&o.e+1>r&&(r=o.e+1),r},C.shiftedBy=function(e){return v(e,-9007199254740991,p),this.times("1e"+e)},C.squareRoot=C.sqrt=function(){var e,t,r,i,o,c=this,s=c.c,u=c.s,a=c.e,l=T+4,f=new H("0.5");if(1!==u||!s||!s[0])return new H(!u||u<0&&(!s||s[0])?NaN:s?c:1/0);if(0==(u=Math.sqrt(+Q(c)))||u==1/0?(((t=w(s)).length+a)%2==0&&(t+="0"),u=Math.sqrt(+t),a=m((a+1)/2)-(a<0||a%2),r=new H(t=u==1/0?"5e"+a:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+a)):r=new H(u+""),r.c[0])for((u=(a=r.e)+l)<3&&(u=0);;)if(o=r,r=f.times(o.plus(n(c,o,l,1))),w(o.c).slice(0,u)===(t=w(r.c)).slice(0,u)){if(r.e<a&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(i||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(Z(r,r.e+T+2,1),e=!r.times(r).eq(c));break}if(!i&&(Z(o,o.e+T+2,0),o.times(o).eq(c))){r=o;break}l+=4,u+=4,i=1}return Z(r,r.e+T+1,S,e)},C.toExponential=function(e,t){return null!=e&&(v(e,0,g),e++),z(this,e,t,1)},C.toFixed=function(e,t){return null!=e&&(v(e,0,g),e=e+this.e+1),z(this,e,t)},C.toFormat=function(e,t,n){var r,i=this;if(null==n)null!=e&&t&&"object"==typeof t?(n=t,t=null):e&&"object"==typeof e?(n=e,e=t=null):n=q;else if("object"!=typeof n)throw Error(a+"Argument not an object: "+n);if(r=i.toFixed(e,t),i.c){var o,c=r.split("."),s=+n.groupSize,u=+n.secondaryGroupSize,l=n.groupSeparator||"",f=c[0],h=c[1],p=i.s<0,d=p?f.slice(1):f,b=d.length;if(u&&(o=s,s=u,u=o,b-=o),s>0&&b>0){for(o=b%s||s,f=d.substr(0,o);o<b;o+=s)f+=l+d.substr(o,s);u>0&&(f+=l+d.slice(o)),p&&(f="-"+f)}r=h?f+(n.decimalSeparator||"")+((u=+n.fractionGroupSize)?h.replace(new RegExp("\\d{"+u+"}\\B","g"),"$&"+(n.fractionGroupSeparator||"")):h):f}return(n.prefix||"")+r+(n.suffix||"")},C.toFraction=function(e){var t,r,i,o,c,s,u,l,f,p,b,g,m=this,y=m.c;if(null!=e&&(!(u=new H(e)).isInteger()&&(u.c||1!==u.s)||u.lt(_)))throw Error(a+"Argument "+(u.isInteger()?"out of range: ":"not an integer: ")+Q(u));if(!y)return new H(m);for(t=new H(_),f=r=new H(_),i=l=new H(_),g=w(y),c=t.e=g.length-m.e-1,t.c[0]=d[(s=c%h)<0?h+s:s],e=!e||u.comparedTo(t)>0?c>0?t:f:u,s=D,D=1/0,u=new H(g),l.c[0]=0;p=n(u,t,0,1),1!=(o=r.plus(p.times(i))).comparedTo(e);)r=i,i=o,f=l.plus(p.times(o=f)),l=o,t=u.minus(p.times(o=t)),u=o;return o=n(e.minus(r),i,0,1),l=l.plus(o.times(f)),r=r.plus(o.times(i)),l.s=f.s=m.s,b=n(f,i,c*=2,S).minus(m).abs().comparedTo(n(l,r,c,S).minus(m).abs())<1?[f,i]:[l,r],D=s,b},C.toNumber=function(){return+Q(this)},C.toPrecision=function(e,t){return null!=e&&v(e,1,g),z(this,e,t,2)},C.toString=function(e){var t,n=this,i=n.s,o=n.e;return null===o?i?(t="Infinity",i<0&&(t="-"+t)):t="NaN":(null==e?t=o<=M||o>=U?E(w(n.c),o):O(w(n.c),o,"0"):10===e&&W?t=O(w((n=Z(new H(n),T+o+1,S)).c),n.e,"0"):(v(e,2,G.length,"Base"),t=r(O(w(n.c),o,"0"),10,e,i,!0)),i<0&&n.c[0]&&(t="-"+t)),t},C.valueOf=C.toJSON=function(){return Q(this)},C._isBigNumber=!0,null!=t&&H.set(t),H}(),o.default=o.BigNumber=o,void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{n.d(r,{VZ:()=>u,Np:()=>i,aW:()=>a,_S:()=>y,RG:()=>m,ze:()=>s,Sb:()=>w,EM:()=>b,DR:()=>g,Sw:()=>p,qZ:()=>d,H1:()=>f,QM:()=>h,FI:()=>l});var e=n(431),t=n.n(e),i=function(){function e(){}return e.newInstance=function(e,n){return new(t())(e,n)},e}(),o=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function c(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,s)}u((r=r.apply(e,t||[])).next())}))},c=function(e,t){var n,r,i,o,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return c.label++,{value:o[1],done:!1};case 5:c.label++,r=o[1],o=[0];continue;case 7:o=c.ops.pop(),c.trys.pop();continue;default:if(!((i=(i=c.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){c=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){c.label=o[1];break}if(6===o[0]&&c.label<i[1]){c.label=i[1],i=o;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(o);break}i[2]&&c.ops.pop(),c.trys.pop();continue}o=t.call(e,c)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},s=function(){function e(e,t){if(this.web3Factory=e,this.detectEthereumProvider=t,this.selectedAccount=null,this.web3=null,this.provider=null,this._accounts=null,this._networkId=0,this._blockchains={},!this.web3Factory||!this.detectEthereumProvider)throw new Error("web3Factory and detectEthereumProvider are required");if(this.web3Factory.prototype&&this.web3Factory.prototype.constructor){var n=this.web3Factory;this.web3Factory=function(e){return new n(e)}}}return Object.defineProperty(e.prototype,"isConnected",{get:function(){return!!this.selectedAccount},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"accounts",{get:function(){return function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}([],this._accounts||[],!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"address",{get:function(){return this.selectedAccount},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"networkId",{get:function(){return this._networkId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"networkName",{get:function(){var e=this._blockchains[this._networkId];return e?e.name:"Unknown"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"blockchains",{get:function(){return this._blockchains},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"blockchainsList",{get:function(){var e=this;return Object.keys(this._blockchains).map((function(t){return e._blockchains[+t]}))},enumerable:!1,configurable:!0}),e.prototype.connect=function(){return o(this,void 0,void 0,(function(){var e,t,n;return c(this,(function(r){switch(r.label){case 0:return[4,this.connectProvider()];case 1:return(e=r.sent())?[4,e.request({method:"eth_requestAccounts"})]:[2,!1];case 2:return(t=r.sent())&&0!==t.length?(this.provider=e,this.web3=this.web3Factory(e),n=this,[4,this.web3.eth.net.getId()]):[2,!1];case 3:return n._networkId=r.sent(),this._accounts=t,this.selectedAccount=t[0],[2,!0]}}))}))},e.prototype.addNetwork=function(e){return o(this,void 0,void 0,(function(){var t,n;return c(this,(function(r){switch(r.label){case 0:if(t=parseInt(e.chainId,16),this.networkId===t)return[2,!1];r.label=1;case 1:return r.trys.push([1,3,,7]),[4,this.provider.request({method:"wallet_switchEthereumChain",params:[{chainId:e.chainId}]})];case 2:return r.sent(),[3,7];case 3:return 4902!==(n=r.sent()).code?[3,5]:[4,this.provider.request({method:"wallet_addEthereumChain",params:[e]})];case 4:return r.sent(),[3,6];case 5:throw n;case 6:return[3,7];case 7:return[2,!0]}}))}))},e.prototype.sign=function(e,t){var n=this;return new Promise((function(r,i){n.web3.eth.personal.sign(n.web3.utils.fromUtf8("".concat(e)),t||n.address,(function(e,t){e?i(e):r(t)}))}))},e.prototype.disconnect=function(){this.disposeWeb3(),this.disposeProvider()},e.prototype.getContract=function(e,t){if(!e||"-"===e)throw new Error("Wrong contract address: "+e);return new this.web3.eth.Contract(t,e)},e.prototype.getBalance=function(e){return o(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return[4,this.web3.eth.getBalance(e||this.address)];case 1:return t=n.sent(),[2,i.newInstance(t)]}}))}))},e.prototype.getNonce=function(e){return o(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.web3.eth.getTransactionCount(e)];case 1:return[2,+t.sent()]}}))}))},e.prototype.toHex=function(e){return this.web3.utils.toHex(e)},e.prototype.toWei=function(e,t){return this.web3.utils.toWei(e,t)},e.prototype.addPlugin=function(e){if("blockchain-list"===e.getPluginType())for(var t=0,n=e.getBlockchains();t<n.length;t++){var r=n[t];this._blockchains[r.id]=r}},e.prototype.connectProvider=function(){return o(this,void 0,void 0,(function(){var e,t=this;return c(this,(function(n){switch(n.label){case 0:return[4,this.detectEthereumProvider()];case 1:return(e=n.sent()).on("chainChanged",(function(){t.reload()})),e.on("accountsChanged",(function(){t.reload()})),e.on("disconnect",(function(){t.reload()})),[2,e]}}))}))},e.prototype.disposeProvider=function(){this.provider&&this.provider.close&&(this.provider.close(),this.provider=null)},e.prototype.disposeWeb3=function(){this.web3&&(this.web3.eth&&this.web3.eth.clearSubscriptions&&this.web3.eth.clearSubscriptions(),this.web3=null)},e.prototype.reload=function(){location.reload()},e}(),u=function(){function e(e,t,n){this.web3=e,this.abi=t,this._address=n}return Object.defineProperty(e.prototype,"contract",{get:function(){return this.web3.getContract(this.address,this.abi)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"chainId",{get:function(){return this.web3.networkId},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"helper",{get:function(){return this.web3},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"address",{get:function(){return this._address},enumerable:!1,configurable:!0}),e.prototype.dictionaryToArray=function(e){return Object.keys(e).map((function(t){return e[t]}))},e}(),a=function(){function e(){}return e.toWei=function(e,t){void 0===t&&(t=18);var n=i.newInstance(10).exponentiatedBy(t);return i.newInstance(e).multipliedBy(n)},e.byDecimals=function(e,t){void 0===t&&(t=18);var n=i.newInstance(10).exponentiatedBy(t);return i.newInstance(e).dividedBy(n).toNumber()},e.byDecimalsString=function(e,t){void 0===t&&(t=18);var n=i.newInstance(10).exponentiatedBy(t);return i.newInstance(e).dividedBy(n).toFixed()},e}(),l={chainId:"0x4",chainName:"ETH Rinkeby Testnet",nativeCurrency:{name:"ETH",symbol:"ETH",decimals:18},rpcUrls:["https://rinkeby.infura.io/v3/"],blockExplorerUrls:["https://rinkeby.etherscan.io"]},f={chainId:"0x89",chainName:"Polygon Mainnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://polygon-rpc.com"],blockExplorerUrls:["https://explorer.matic.network"]},h={chainId:"0x13881",chainName:"Polygon Testnet",nativeCurrency:{name:"MATIC",symbol:"MATIC",decimals:18},rpcUrls:["https://rpc-mumbai.maticvigil.com"],blockExplorerUrls:["https://mumbai.polygonscan.com"]},p={chainId:"0x38",chainName:"BNB Smart Chain Mainnet",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://bsc-dataseed1.binance.org/"],blockExplorerUrls:["https://bscscan.com/"]},d={chainId:"0x61",chainName:"BNB Smart Chain Testnet",nativeCurrency:{name:"BNB",symbol:"BNB",decimals:18},rpcUrls:["https://data-seed-prebsc-1-s1.binance.org:8545/"],blockExplorerUrls:["https://testnet.bscscan.com/"]},b={4:l,56:p,97:d,137:f,80001:h},g={56:{name:"Binance Smart Chain",symbol:"BNB",explorer:"https://bscscan.com",rpc:"https://bsc-dataseed.binance.org"},97:{name:"Binance Smart Chain TESTNET",symbol:"BNB",explorer:"https://testnet.bscscan.com",rpc:"https://data-seed-prebsc-1-s1.binance.org:8545"},137:{name:"Polygon",symbol:"MATIC",explorer:"https://polygonscan.com",rpc:"https://rpc-mainnet.maticvigil.com"},80001:{name:"Polygon Mumbai TESTNET",symbol:"MATIC",explorer:"https://mumbai.polygonscan.com",rpc:"https://rpc-mumbai.maticvigil.com"}},m=function(){function e(){}return e.prototype.getPluginType=function(){return"blockchain-list"},e.prototype.getBlockchains=function(){return Object.keys(g).map((function(e){return+e})).map((function(e){return{id:e,name:g[e].name,symbol:g[e].symbol,explorer:g[e].explorer,rpc:g[e].rpc}}))},e}(),w=function(){function e(){}return e.getWeb3Class=function(){var e=window,t=e.Web3||e.web3;if(!t)throw new Error("MetaMascara requires web3.js. Please install it.");return t},e.newInstance=function(t,n){var r=t||window.detectEthereumProvider;if(!r)throw new Error("Could not detect Ethereum provider. Please provide a detectEthereumProvider function.");var i=new s(n||e.getWeb3Class(),r);return e.defaultPlugins.map((function(e){return e})).forEach((function(e){return i.addPlugin(e)})),i},e.defaultPlugins=[new m],e}(),y=function(){function e(e){var t=e.getAllChains;this.getAllChains=t}return e.prototype.getPluginType=function(){return"blockchain-list"},e.prototype.getBlockchains=function(){return this.getAllChains().map((function(e){return{id:e.chainId,name:e.name,symbol:e.nativeCurrency.symbol,explorer:e.infoURL,rpc:e.rpc&&e.rpc.length>0?e.rpc[0]:null}}))},e}()})();var i=r.VZ,o=r.Np,c=r.aW,s=r._S,u=r.RG,a=r.ze,l=r.Sb,f=r.EM,h=r.DR,p=r.Sw,d=r.qZ,b=r.H1,g=r.QM,m=r.FI;export{i as BaseContract,o as BigNumberFactory,c as BigNumberUtils,s as EvmChainsPlugin,u as LocalBlockchainsPlugin,a as MetaMascara,l as MetaMascaraFactory,f as blockchainConnections,h as blockchains,p as bscAddNetworkInfo,d as bscTestnetAddNetworkInfo,b as polygonAddNetworkInfo,g as polygonTestnetAddNetworkInfo,m as rinkebyAddNetworkInfo};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,