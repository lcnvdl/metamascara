{"version":3,"file":"metamascara.min.js","mappings":"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","sources":["webpack://meta/webpack/universalModuleDefinition","webpack://meta/./node_modules/bignumber.js/bignumber.js","webpack://meta/webpack/bootstrap","webpack://meta/webpack/runtime/compat get default export","webpack://meta/webpack/runtime/define property getters","webpack://meta/webpack/runtime/hasOwnProperty shorthand","webpack://meta/webpack/runtime/make namespace object","webpack://meta/./src/factories/big-number-factory.ts","webpack://meta/./src/classes/metamascara.ts","webpack://meta/./src/constants/blockchain-connections.ts","webpack://meta/./src/constants/blockchains.ts","webpack://meta/./src/plugins/local-blockchains.plugin.ts","webpack://meta/./src/factories/metamascara-factory.ts","webpack://meta/./src/plugins/evm-chains.plugin.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"meta\"] = factory();\n\telse\n\t\troot[\"meta\"] = factory();\n})(self, () => {\nreturn ",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import BigNumber from 'bignumber.js';\r\n\r\nexport class BigNumberFactory {\r\n  static newInstance(value: string | number, base?: number) {\r\n    return new BigNumber(value, base);\r\n  }\r\n}","import { IAddNetworkInfo } from '../interfaces/add-network-info.interface';\r\nimport { BigNumberFactory } from '../factories/big-number-factory';\r\nimport { IMetamascaraPlugin } from '../interfaces/plugins/metamascara-plugin.interface';\r\nimport { IBlockchainInfo } from '../interfaces/blockchain-info.interface';\r\nimport { IBlockchainListPlugin } from '../interfaces/plugins/blockchain-list.plugin.interface';\r\n\r\nexport class MetaMascara {\r\n  private accounts: string[] | null = null;\r\n  private selectedAccount: string | null = null;\r\n  private web3: any = null;\r\n  private provider: any = null;\r\n  private _networkId = 0;\r\n  private _blockchains: Record<number, IBlockchainInfo> = {};\r\n\r\n  constructor(private web3Factory: (provider: any) => any, private detectEthereumProvider: () => Promise<any>) {\r\n    if (!this.web3Factory || !this.detectEthereumProvider) {\r\n      throw new Error('web3Factory and detectEthereumProvider are required');\r\n    }\r\n\r\n    if (this.web3Factory.prototype && this.web3Factory.prototype.constructor) {\r\n      const Web3: any = this.web3Factory;\r\n      this.web3Factory = m => new Web3(m);\r\n    }\r\n  }\r\n\r\n  get isConnected() {\r\n    return !!this.selectedAccount;\r\n  }\r\n\r\n  get address(): string | null {\r\n    return this.selectedAccount;\r\n  }\r\n\r\n  get networkId(): number {\r\n    return this._networkId;\r\n  }\r\n\r\n  get networkName(): string {\r\n    const info = this._blockchains[this._networkId];\r\n    if (!info) {\r\n      return 'Unknown';\r\n    }\r\n\r\n    return info.name;\r\n  }\r\n\r\n  get blockchains() {\r\n    return this._blockchains;\r\n  }\r\n\r\n  get blockchainsList() {\r\n    return Object.keys(this._blockchains).map(key => this._blockchains[+key]);\r\n  }\r\n\r\n  async connect() {\r\n    const provider = await this.connectProvider();\r\n    if (!provider) {\r\n      return false;\r\n    }\r\n\r\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\r\n    if (!accounts || accounts.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    this.provider = provider;\r\n    this.web3 = this.web3Factory(provider);\r\n    this._networkId = await this.web3.eth.net.getId();\r\n    this.accounts = accounts;\r\n    this.selectedAccount = accounts[0];\r\n\r\n    return true;\r\n  }\r\n\r\n  async addNetwork(info: IAddNetworkInfo) {\r\n    const numericChainId = parseInt(info.chainId, 16);\r\n    if (this.networkId === numericChainId) {\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      await this.provider.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: info.chainId }],\r\n      });\r\n    } catch (switchError: any) {\r\n      if (switchError.code === 4902) {\r\n        await this.provider.request({ method: 'wallet_addEthereumChain', params: [info] });\r\n      }\r\n      else {\r\n        throw switchError;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  disconnect() {\r\n    this.disposeWeb3();\r\n    this.disposeProvider();\r\n  }\r\n\r\n  getContract(address: string, abi: any): any {\r\n    if (!address || address === '-') {\r\n      throw new Error('Wrong contract address: ' + address);\r\n    }\r\n\r\n    const contract = new this.web3.eth.Contract(abi, address);\r\n    return contract;\r\n  }\r\n\r\n  async getBnbBalance(address: string) {\r\n    const ethBalance = await this.web3.eth.getBalance(address);\r\n    return BigNumberFactory.newInstance(ethBalance);\r\n  }\r\n\r\n  async getNonce(addr: string) {\r\n    const count = await this.web3.eth.getTransactionCount(addr);\r\n    return +count;\r\n  }\r\n\r\n  toHex(x: any): string {\r\n    return this.web3.utils.toHex(x);\r\n  }\r\n\r\n  toWei(value: any, unit: string): string {\r\n    return this.web3.utils.toWei(value, unit);\r\n  }\r\n\r\n  addPlugin(plugin: IMetamascaraPlugin) {\r\n    switch (plugin.getPluginType()) {\r\n      case 'blockchain-list':\r\n        {\r\n          const newBlockchains = (plugin as IBlockchainListPlugin).getBlockchains();\r\n          for (const blockchain of newBlockchains) {\r\n            this._blockchains[blockchain.id] = blockchain;\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async connectProvider() {\r\n    const provider = await this.detectEthereumProvider();\r\n\r\n    provider.on('chainChanged', () => {\r\n      this.reload();\r\n    });\r\n\r\n    provider.on('accountsChanged', () => {\r\n      this.reload();\r\n    });\r\n\r\n    provider.on('disconnect', () => {\r\n      this.reload();\r\n    });\r\n\r\n    return provider;\r\n  }\r\n\r\n  private disposeProvider(): void {\r\n    if (this.provider && this.provider.close) {\r\n      this.provider.close();\r\n      this.provider = null;\r\n    }\r\n  }\r\n\r\n  private disposeWeb3(): void {\r\n    if (this.web3) {\r\n      if (this.web3.eth && this.web3.eth.clearSubscriptions) {\r\n        this.web3.eth.clearSubscriptions();\r\n      }\r\n\r\n      this.web3 = null;\r\n    }\r\n  }\r\n\r\n  private reload() {\r\n    location.reload();\r\n  }\r\n}","import { IAddNetworkInfo } from '../interfaces/add-network-info.interface';\r\n\r\nexport const rinkebyAddNetworkInfo: IAddNetworkInfo = {\r\n  chainId: '0x4',\r\n  chainName: 'ETH Rinkeby Testnet',\r\n  nativeCurrency: {\r\n    name: 'ETH',\r\n    symbol: 'ETH',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://rinkeby.infura.io/v3/'],\r\n  blockExplorerUrls: ['https://rinkeby.etherscan.io']\r\n};\r\n\r\nexport const polygonAddNetworkInfo: IAddNetworkInfo = {\r\n  chainId: '0x89', // 137\r\n  chainName: 'Polygon Mainnet',\r\n  nativeCurrency: {\r\n    name: 'MATIC',\r\n    symbol: 'MATIC',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://polygon-rpc.com'],\r\n  blockExplorerUrls: ['https://explorer.matic.network']\r\n};\r\n\r\nexport const polygonTestnetAddNetworkInfo: IAddNetworkInfo = {\r\n  chainId: '0x13881', // 80001\r\n  chainName: 'Polygon Testnet',\r\n  nativeCurrency: {\r\n    name: 'MATIC',\r\n    symbol: 'MATIC',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://rpc-mumbai.maticvigil.com'],\r\n  blockExplorerUrls: ['https://mumbai.polygonscan.com']\r\n};\r\n\r\nexport const bscAddNetworkInfo: IAddNetworkInfo = {\r\n  chainId: '0x38',\r\n  chainName: 'BNB Smart Chain Mainnet',\r\n  nativeCurrency: {\r\n    name: 'BNB',\r\n    symbol: 'BNB',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://bsc-dataseed1.binance.org/'],\r\n  blockExplorerUrls: ['https://bscscan.com/']\r\n};\r\n\r\nexport const bscTestnetAddNetworkInfo: IAddNetworkInfo = {\r\n  chainId: '0x61',\r\n  chainName: 'BNB Smart Chain Testnet',\r\n  nativeCurrency: {\r\n    name: 'BNB',\r\n    symbol: 'BNB',\r\n    decimals: 18\r\n  },\r\n  rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],\r\n  blockExplorerUrls: ['https://testnet.bscscan.com/']\r\n};\r\n\r\nexport const blockchainConnections = {\r\n  4: rinkebyAddNetworkInfo,\r\n  56: bscAddNetworkInfo,\r\n  97: bscTestnetAddNetworkInfo,\r\n  137: polygonAddNetworkInfo,\r\n  80001: polygonTestnetAddNetworkInfo,\r\n};\r\n","export const blockchains: any = {\r\n  56: {\r\n    name: 'Binance Smart Chain',\r\n    symbol: 'BNB',\r\n    explorer: 'https://bscscan.com',\r\n    rpc: 'https://bsc-dataseed.binance.org'\r\n  },\r\n  97: {\r\n    name: 'Binance Smart Chain TESTNET',\r\n    symbol: 'BNB',\r\n    explorer: 'https://testnet.bscscan.com',\r\n    rpc: 'https://data-seed-prebsc-1-s1.binance.org:8545'\r\n  },\r\n  137: {\r\n    name: 'Polygon',\r\n    symbol: 'MATIC',\r\n    explorer: 'https://polygonscan.com',\r\n    rpc: 'https://rpc-mainnet.maticvigil.com'\r\n  },\r\n  80001: {\r\n    name: 'Polygon Mumbai TESTNET',\r\n    symbol: 'MATIC',\r\n    explorer: 'https://mumbai.polygonscan.com',\r\n    rpc: 'https://rpc-mumbai.maticvigil.com'\r\n  }\r\n};","import { blockchains } from '../constants/blockchains';\r\nimport { IBlockchainInfo } from '../interfaces/blockchain-info.interface';\r\nimport { IBlockchainListPlugin } from '../interfaces/plugins/blockchain-list.plugin.interface';\r\n\r\nexport class LocalBlockchainsPlugin implements IBlockchainListPlugin {\r\n  getPluginType(): 'blockchain-list' {\r\n    return 'blockchain-list';\r\n  }\r\n\r\n  getBlockchains(): IBlockchainInfo[] {\r\n    const ids: number[] = Object.keys(blockchains).map(m => +m);\r\n    return ids.map(id => {\r\n      return {\r\n        id,\r\n        name: blockchains[id].name,\r\n        symbol: blockchains[id].symbol,\r\n        explorer: blockchains[id].explorer,\r\n        rpc: blockchains[id].rpc\r\n      };\r\n    });\r\n  }\r\n}","import { MetaMascara } from '../classes/metamascara';\r\nimport { LocalBlockchainsPlugin } from '../plugins/local-blockchains.plugin';\r\nimport { IMetamascaraPlugin } from '../interfaces/plugins/metamascara-plugin.interface';\r\n\r\nexport class MetaMascaraFactory {\r\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\r\n  public static defaultPlugins = [\r\n    new LocalBlockchainsPlugin(),\r\n  ];\r\n\r\n  private static getWeb3Class() {\r\n    const w = (window as any);\r\n    const web3 = w.Web3 || w.web3;\r\n\r\n    if (!web3) {\r\n      throw new Error('MetaMascara requires web3.js. Please install it.');\r\n    }\r\n\r\n    return web3;\r\n  }\r\n\r\n  static newInstance(detectEthereumProvider?: () => Promise<any>, web3Factory?: (provider: any) => any) {\r\n    const providerDetector = detectEthereumProvider || (window as any).detectEthereumProvider;\r\n    if (!providerDetector) {\r\n      throw new Error('Could not detect Ethereum provider. Please provide a detectEthereumProvider function.');\r\n    }\r\n\r\n    const instance = new MetaMascara(web3Factory || MetaMascaraFactory.getWeb3Class(), providerDetector);\r\n    MetaMascaraFactory.defaultPlugins.map(m => m as IMetamascaraPlugin).forEach(m => instance.addPlugin(m));\r\n    return instance;\r\n  }\r\n}\r\n","import { IBlockchainInfo } from '../interfaces/blockchain-info.interface';\r\nimport { IBlockchainListPlugin } from '../interfaces/plugins/blockchain-list.plugin.interface';\r\n\r\ninterface IChainData {\r\n  name: string;\r\n  chainId: number;\r\n  shortName: string;\r\n  chain: string;\r\n  network: string;\r\n  networkId: number;\r\n  nativeCurrency: {\r\n    name: string;\r\n    symbol: string;\r\n    decimals: number;\r\n  };\r\n  rpc: string[];\r\n  faucets: string[];\r\n  infoURL: string;\r\n}\r\n\r\n/**\r\n * @description Evm-chains wrapper. Package: https://www.npmjs.com/package/evm-chains .\r\n */\r\nexport class EvmChainsPlugin implements IBlockchainListPlugin {\r\n  private getAllChains: () => IChainData[];\r\n\r\n  constructor({ getAllChains }: { getAllChains: () => IChainData[] }) {\r\n    this.getAllChains = getAllChains;\r\n  }\r\n\r\n  getPluginType(): 'blockchain-list' {\r\n    return 'blockchain-list';\r\n  }\r\n\r\n  getBlockchains(): IBlockchainInfo[] {\r\n    return this.getAllChains().map(chain => {\r\n      return {\r\n        id: chain.chainId,\r\n        name: chain.name,\r\n        symbol: chain.nativeCurrency.symbol,\r\n        explorer: chain.infoURL,\r\n        rpc: (chain.rpc && chain.rpc.length > 0) ? chain.rpc[0] : null,\r\n      } as IBlockchainInfo;\r\n    });\r\n  }\r\n}\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","i","coeffToString","a","s","z","j","length","r","charCodeAt","slice","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","name","Error","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","this","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","maxOrMin","args","method","m","call","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","random","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","getter","__esModule","definition","key","o","Object","defineProperty","enumerable","get","prop","Symbol","toStringTag","value","newInstance","web3Factory","detectEthereumProvider","accounts","selectedAccount","web3","provider","_networkId","_blockchains","info","keys","map","connect","connectProvider","request","eth","net","getId","addNetwork","numericChainId","parseInt","chainId","networkId","params","code","disconnect","disposeWeb3","disposeProvider","getContract","address","abi","Contract","getBnbBalance","getBalance","ethBalance","BigNumberFactory","getNonce","addr","getTransactionCount","toHex","utils","toWei","unit","addPlugin","plugin","getPluginType","getBlockchains","blockchain","on","reload","close","clearSubscriptions","location","rinkebyAddNetworkInfo","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","polygonAddNetworkInfo","polygonTestnetAddNetworkInfo","bscAddNetworkInfo","bscTestnetAddNetworkInfo","blockchainConnections","blockchains","explorer","rpc","getWeb3Class","w","window","Web3","providerDetector","instance","MetaMascara","MetaMascaraFactory","defaultPlugins","forEach","LocalBlockchainsPlugin","getAllChains","chain","infoURL"],"sourceRoot":""}